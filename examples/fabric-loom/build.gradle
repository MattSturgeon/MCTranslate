plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenLocal()
}

sourceSets {
	translate {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"modid" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

    // MC Translate
    translateImplementation "dev.mattsturgeon:mc-translate" // Version omitted because composite build
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

tasks.register("run", JavaExec) {
	group = "example"
	description = "Example task that uses mc-translate."

	classpath = sourceSets.translate.runtimeClasspath
	mainClass = "com.example.ExampleTranslator"
	workingDir = layout.projectDirectory.dir("run").asFile
	doFirst { workingDir.mkdirs() }

	// This will download mc assets & jar
	dependsOn(tasks.downloadAssets)
	dependsOn(tasks.configureClientLaunch)

	def modAssets = file("src/main/resources/assets").toPath()
	def minecraftVersion = loom.minecraftVersion.get()
	def minecraftAssets = loom.files.userCache.toPath().resolve("assets")
	def assetIndex = loom.minecraftProvider.versionInfo.assetIndex().fabricId(minecraftVersion)
	def mcJar = loom.minecraftProvider.minecraftClientJar

	args = [
			"--mcJar", mcJar,
			"--assetIndex", assetIndex,
			"--assetsDir", minecraftAssets.toAbsolutePath(),
			"--modAssetsDir", modAssets.toAbsolutePath(),
	]
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}